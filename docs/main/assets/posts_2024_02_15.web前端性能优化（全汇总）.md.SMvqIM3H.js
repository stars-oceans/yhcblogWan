import{_ as i,c as s,o as a,V as e}from"./chunks/framework.WW8f2_VW.js";const g=JSON.parse('{"title":"web前端性能优化（全汇总）","description":"web前端性能优化（全汇总）","frontmatter":{"post":true,"title":"web前端性能优化（全汇总）","date":"2024-02-04T00:00:00.000Z","cover":"https://i.postimg.cc/8PJRKd7J/svg-2.png","coveross":"https://i.postimg.cc/8PJRKd7J/svg-2.png","categories":["业务"],"tags":["性能优化"],"description":"web前端性能优化（全汇总）"},"headers":[],"relativePath":"posts/2024/02/15.web前端性能优化（全汇总）.md","filePath":"posts/2024/02/15.web前端性能优化（全汇总）.md"}'),l={name:"posts/2024/02/15.web前端性能优化（全汇总）.md"},t=e(`<h1 id="web前端性能优化-全汇总" tabindex="-1">web前端性能优化（全汇总） <a class="header-anchor" href="#web前端性能优化-全汇总" aria-label="Permalink to &quot;web前端性能优化（全汇总）&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>web前端性能优化，老生常谈的话题，也是每个企业每个项目最为关心的问题。为了使用户体验达到极致，我们不得不为每一个细节深思琢磨，尽可能达到我们想要的方案。</p><p>面试中我们也常常被问到性能优化的问题，如果胡乱穿插一些优化方案，面试官会感觉没有条理性，我们也回答的没有拿捏感，所有我们更应该有思路、有条理的叙述出一个前端性能优化相对完整的流程</p><p>这便文章我将以几个大方向总结性能优化 思路也是从<code>浏览器 -〉资源 -〉图片 -〉代码层面</code>来讲解</p><h2 id="优化模块" tabindex="-1">优化模块 <a class="header-anchor" href="#优化模块" aria-label="Permalink to &quot;优化模块&quot;">​</a></h2><h3 id="浏览器" tabindex="-1">浏览器： <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器：&quot;">​</a></h3><ul><li><code>减少HTTP请求</code> 如Chrome浏览器最多同时允许对同一个域名Host建立6个TCP连接，不同的浏览器有所区别，减少http请求也就是减少我们html里css/js等资源的数量</li><li><code>使用HTTP2.0</code> 需要配置一个支持h2的web服务器，并下载安装一张TLS证书，让浏览器与服务器通过h2链接 http2.0优势： <ol><li>采用二进制格式传输数据, 1.1是文本格式</li><li>对消息头采用Hpack进行压缩传输，能够节省消息头占用的网络流量，1.1每次请求，都会携带大量冗余的头信息，浪费了很多宽带资源</li><li>异步连接多路复用</li><li>Server Push，服务器端能够更快的把资源推送到客户端</li><li>保持与HTTP 1.1语义的向后兼容性也是该版本的一个关键</li></ol></li><li><code>设置浏览器缓存策略</code> 主要为设置缓存策略：<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer">强缓存和协商缓存(编写中)</a></li><li><code>白屏时间做加载动画</code> 增强用户体验</li></ul><h3 id="资源" tabindex="-1">资源： <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源：&quot;">​</a></h3><ul><li><code>静态资源cdn</code> 静态css/js/img等资源可以做cdn缓存，这样把资源同步到全国全球各地，用户就能更快访问到</li><li><code>静态资源单独域名</code><ol><li>浏览器请求并发限制（同一域名（包括二级域名）在同一时间支持的并发请求数量的限制）</li><li>cookie传输，单独域名，不会携带cookie</li><li>方便分流和缓存（动静分离，有利于静态资源做cdn缓存）</li></ol></li><li><code>gzip压缩</code> 使资源体积更小 服务端配置，如nginx可配置支持gzip压缩资源传输的方式 如果浏览器支持gzip解析，服务器就会推送gzip的资源，在http的相应头里可以看到显示Content-Encoding:gzip</li><li><code>做服务端渲染（SSR）</code> 现在主流框的react、vue导致的一个痛点，就是页面构建交给了客户端来渲染，构建的过程无疑是排在了请求到html/js资源后，也就是至少两次http请求后才开始构建，这无疑是导致白屏的关键点之一，所以做ssr页面的话，能够直接返回页面，减少了不少首屏渲染时间</li><li><code>将CSS放在文件头部，JavaScript文件放在底部</code> 单线程js可能会阻滞文档加载</li></ul><h3 id="图片" tabindex="-1">图片： <a class="header-anchor" href="#图片" aria-label="Permalink to &quot;图片：&quot;">​</a></h3><ul><li><code>字体图标代替图片图标</code> 一些通用的小图标，如箭头，叉，可以使用字体图标，减少请求，渲染更快</li><li><code>精灵图</code> 一些带有企业特色的小图标，如淘宝购物车，笑脸娃娃，可以使用精灵图，让一张图上带有多个小图，然后使用css背景定位来显示出合适的位子，能大大减少请求</li><li><code>图片懒加载</code> 为了首屏渲染更快，图片可设置一张加载图代替，当页面在可视区域内时在替换为正真的图片 如果有首屏很大的高清图，可先渲染清晰度低的缩略图，在首页基本构建完成下一次事件循环再去替换为高清图</li><li><code>图片预加载</code> 可以在window.onload之后请求一些其他地方需要的图片资源 比如我们有一个活动页使用了高清图，我们可以在它的入口前的首页就加载它，当我们进去页面时，浏览器就会从缓存里读取这张图片</li><li><code>使用png格式的图片</code> PNG 格式是WEB 图像中最通用的格式，它是一种无损压缩格式</li><li><code>小于10k的图片可以打包为base64格式</code> 可以使用webpack url-loader处理</li></ul><h3 id="代码" tabindex="-1">代码： <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码：&quot;">​</a></h3><ul><li><p><code>慎用全局变量</code></p><ol><li>全局变量定义在全局执行上下文，是所有作用域链的顶端。局部找不到就会一直往上找，影响性能</li><li>全局执行上下文一直存在于上下文执行栈，直到程序退出，不利于GC回收</li><li>命名污染</li></ol></li><li><p><code>缓存全局变量</code> 将使用中无法避免的全局变量缓存到局部</p></li><li><p><code>减少重绘回流</code> 回流：当元素的规模尺寸，布局，隐藏等改变的时候，render dom需要重新构建，这就称为回流 重绘：元素只更新外观，风格，而不会影响布局的，叫重绘</p></li><li><p><code>节流、防抖</code></p></li><li><p><code>少用闭包、减少内存泄漏</code></p></li><li><p><code>减少数据读取次数</code> 如for循环优化，减少length读取次数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>文档碎片优化节点添加</code> dom：document.createDocumentFragment()</p></li><li><p><code>减少判断层级</code> 减少if else，提前return if不满足的逻辑</p></li><li><p><code>字面量与构造式</code> 数组、对象、字符串等，直接声明比new 更快</p></li></ul><h3 id="项目方案提议-额外" tabindex="-1">项目方案提议（额外） <a class="header-anchor" href="#项目方案提议-额外" aria-label="Permalink to &quot;项目方案提议（额外）&quot;">​</a></h3><ul><li><code>长列表优化</code></li><li><code>web worker</code> web worker是运行在后台的js，独立于其他脚本，不会影响页面你的性能。并且通过postMessage将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</li><li><code>避免 ifarme 嵌套网页</code> 阻止了onload，使用户感觉加载很慢的感觉 与父页面共享浏览器连接池，与父页面并行占用http最大连接数，所以资源加载更慢 不利于seo 兼容性不太好，如小程序里面嵌入h5，h5又使用了ifarme</li></ul><h3 id="webpack优化-额外" tabindex="-1">webpack优化（额外） <a class="header-anchor" href="#webpack优化-额外" aria-label="Permalink to &quot;webpack优化（额外）&quot;">​</a></h3><ul><li><code>减小代码体积</code></li><li><code>按需加载</code></li><li><code>提取第三库代码</code></li><li><code>webpack dll优化</code></li></ul>`,18),h=[t];function n(p,o,d,k,r,c){return a(),s("div",null,h)}const y=i(l,[["render",n]]);export{g as __pageData,y as default};
